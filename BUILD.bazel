# Copyright 2023 Google LLC
#
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file or at
# https://developers.google.com/open-source/licenses/bsd

# Bazel build rules for Vanir.
load("@rules_python//python:defs.bzl", "py_library", "py_test")
load("@vanir_deps//:requirements.bzl", "requirement")

package(default_visibility = [
    "//visibility:public",
])

licenses(["notice"])

exports_files(["LICENSE"])

py_library(
    name = "osv_client",
    srcs = ["vanir/osv_client.py"],
    deps = [
        requirement("absl-py"),
        requirement("requests"),
        requirement("google-cloud-storage"),
    ],
)

py_library(
    name = "parser",
    srcs = ["vanir/parser.py"],
    deps = [
        ":signature",
        requirement("absl-py"),
        "//vanir/language_parsers",
    ],
)

py_library(
    name = "normalizer",
    srcs = ["vanir/normalizer.py"],
    deps = [
        "//vanir/language_parsers:common",
    ],
)

py_library(
    name = "hasher",
    srcs = ["vanir/hasher.py"],
    deps = [
        requirement("absl-py"),
        requirement("mmh3"),
    ],
)

py_library(
    name = "refiner",
    srcs = ["vanir/refiner.py"],
    data = ["@pybind11_abseil//pybind11_abseil:status.so"],
    deps = [
        ":parser",
        ":signature",
        "//vanir/code_extractors:code_extractor_base",
        requirement("absl-py"),
    ],
)

py_library(
    name = "signature",
    srcs = ["vanir/signature.py"],
    deps = [
        ":hasher",
        ":normalizer",
        "//vanir/language_parsers:common",
        requirement("absl-py"),
        requirement("typing_extensions"),
    ],
)

py_library(
    name = "version_extractor",
    srcs = ["vanir/version_extractor.py"],
    deps = [
        requirement("absl-py"),
    ],
)

py_library(
    name = "vulnerability",
    srcs = ["vanir/vulnerability.py"],
    deps = [
        ":signature",
        requirement("osv"),
        requirement("protobuf"),
        
        # This is not a direct dependency but is added to resolve dependency errors. For Python 3.9,
        # the version of google-cloud-datastore used is 1.15.5 and dependency on six module in
        # google-cloud-datastore was removed in version 2.1.0 as per
        # https://github.com/googleapis/python-datastore/pull/120.
        # This is a temporary fix required only for Python 3.9 and can be removed once Python 3.9 is
        # out-of-support in 2025-10 as per https://devguide.python.org/versions/#supported-versions.
        requirement("six"),
    ],
)

py_library(
    name = "vulnerability_manager",
    srcs = ["vanir/vulnerability_manager.py"],
    deps = [
        ":osv_client",
        ":refiner",
        ":sign_generator",
        ":signature",
        ":vulnerability",
        ":vulnerability_overwriter",
        "//vanir/code_extractors:code_extractor",
        requirement("absl-py"),
        requirement("python-dateutil"),
        requirement("requests"),
    ],
)

py_library(
    name = "sign_generator",
    srcs = ["vanir/sign_generator.py"],
    data = ["@pybind11_abseil//pybind11_abseil:status.so"],
    deps = [
        ":osv_client",
        ":parser",
        ":signature",
        ":truncated_path",
        "//vanir/code_extractors:code_extractor_base",
        requirement("absl-py"),
        requirement("requests"),
    ],
)

py_binary(
    name = "sign_generator_runner",
    srcs = [
        "vanir/sign_generator_runner.py",
    ],
    deps = [
        ":file_list_manager",
        ":sign_generator",
        ":vulnerability",
        ":vulnerability_manager",
        requirement("absl-py"),
        requirement("requests"),
    ],
)

py_library(
    name = "sign_generator_runner.testonly_lib",
    testonly = True,
    srcs = [
        "vanir/sign_generator_runner.py",
    ],
    deps = [
        ":sign_generator",
        ":vulnerability",
        ":vulnerability_manager",
        requirement("absl-py"),
        requirement("requests"),
    ],
)

py_library(
    name = "detector_common_flags",
    srcs = ["vanir/detector_common_flags.py"],
    deps = [
        ":vulnerability_manager",
        ":vulnerability_overwriter",
        "//vanir/scanners:scanner_base",
        "//vanir/scanners:target_selection_strategy",
        requirement("absl-py"),
    ],
)

py_library(
    name = "reporter",
    srcs = ["vanir/reporter.py"],
    deps = [
        ":vulnerability_manager",
        "//vanir/scanners:scanner_base",
        requirement("absl-py"),
    ],
)

py_library(
    name = "truncated_path",
    srcs = ["vanir/truncated_path.py"],
)

py_library(
    name = "file_list_manager",
    srcs = ["vanir/file_list_manager.py"],
    data = [
        "@pybind11_abseil//pybind11_abseil:status.so",
    ],
    deps = [
        ":parser",
        "//vanir/cache:ecosystem_file_lists",
    ],
)

py_binary(
    name = "detector_runner",
    srcs = ["vanir/detector_runner.py"],
    deps = [
        ":detector_common_flags",
        ":osv_client",
        ":reporter",
        ":vulnerability_manager",
        "//vanir/scanners:android_kernel_scanner",
        "//vanir/scanners:offline_directory_scanner",
        "//vanir/scanners:package_scanner",
        "//vanir/scanners:repo_scanner",
        "//vanir/scanners:scanner_base",
        requirement("absl-py"),
        requirement("jinja2"),
        requirement("requests"),
    ],
)

py_library(
    name = "detector_runner.testonly_lib",
    testonly = True,
    srcs = ["vanir/detector_runner.py"],
    deps = [
        ":detector_common_flags",
        ":osv_client",
        ":reporter",
        ":vulnerability_manager",
        "//vanir/scanners:android_kernel_scanner",
        "//vanir/scanners:offline_directory_scanner",
        "//vanir/scanners:package_scanner",
        "//vanir/scanners:repo_scanner",
        "//vanir/scanners:scanner_base",
        requirement("absl-py"),
        requirement("jinja2"),
        requirement("requests"),
    ],
)

py_library(
    name = "vulnerability_overwriter",
    srcs = ["vanir/vulnerability_overwriter.py"],
    deps = [
        requirement("jsonpath_ng"),
    ],
)

py_library(
    name = "vanir_test_base",
    testonly = True,
    srcs = ["vanir/vanir_test_base.py"],
    deps = [
        requirement("absl-py"),
    ],
)

py_library(
    name = "file_path_utils",
    srcs = ["vanir/file_path_utils.py"],
)

py_test(
    name = "parser_test",
    size = "small",
    srcs = ["vanir/parser_test.py"],
    data = ["@pybind11_abseil//pybind11_abseil:status.so"],
    deps = [
        ":parser",
        requirement("absl-py"),
    ],
)

py_test(
    name = "normalizer_test",
    size = "small",
    srcs = ["vanir/normalizer_test.py"],
    deps = [
        ":normalizer",
        "//vanir/language_parsers:common",
        requirement("absl-py"),
    ],
)

py_test(
    name = "hasher_test",
    size = "small",
    srcs = ["vanir/hasher_test.py"],
    deps = [
        ":hasher",
        requirement("absl-py"),
        requirement("mmh3"),
    ],
)

py_test(
    name = "signature_test",
    size = "small",
    srcs = ["vanir/signature_test.py"],
    deps = [
        ":signature",
        requirement("absl-py"),
    ],
)

py_test(
    name = "version_extractor_test",
    srcs = ["vanir/version_extractor_test.py"],
    deps = [
        ":version_extractor",
    ],
)

py_test(
    name = "vulnerability_test",
    size = "small",
    srcs = ["vanir/vulnerability_test.py"],
    deps = [
        ":signature",
        ":vulnerability",
        requirement("absl-py"),
        requirement("osv"),
        requirement("protobuf"),
    ],
)

py_test(
    name = "vulnerability_manager_test",
    size = "small",
    srcs = ["vanir/vulnerability_manager_test.py"],
    deps = [
        ":osv_client",
        ":refiner",
        ":sign_generator",
        ":signature",
        ":vulnerability",
        ":vulnerability_manager",
        "//vanir/code_extractors:code_extractor",
        "//vanir/code_extractors:code_extractor_base",
        requirement("absl-py"),
    ],
)

py_test(
    name = "sign_generator_test",
    size = "small",
    srcs = ["vanir/sign_generator_test.py"],
    data = ["@pybind11_abseil//pybind11_abseil:status.so"],
    deps = [
        ":parser",
        ":sign_generator",
        ":signature",
        "//vanir/code_extractors:code_extractor_base",
        requirement("absl-py"),
    ],
)

py_test(
    name = "sign_generator_runner_test",
    size = "small",
    srcs = ["vanir/sign_generator_runner_test.py"],
    deps = [
        ":file_list_manager",
        ":osv_client",
        ":sign_generator_runner.testonly_lib",
        ":signature",
        ":vulnerability",
        ":vulnerability_manager",
        requirement("absl-py"),
    ],
)

py_test(
    name = "detector_common_flags_test",
    size = "small",
    srcs = ["vanir/detector_common_flags_test.py"],
    data = [
        "//vanir/testdata:test_overwrite_specs.json",
    ],
    deps = [
        ":detector_common_flags",
        ":file_path_utils",
        ":vulnerability_manager",
        "//vanir/scanners:scanner_base",
        "//vanir/scanners:target_selection_strategy",
        requirement("absl-py"),
    ],
)

py_test(
    name = "reporter_test",
    size = "small",
    srcs = ["vanir/reporter_test.py"],
    deps = [
        ":reporter",
        ":vulnerability_manager",
        requirement("absl-py"),
    ],
)

py_test(
    name = "detector_runner_test",
    size = "small",
    srcs = ["vanir/detector_runner_test.py"],
    deps = [
        ":detector_runner.testonly_lib",
        ":osv_client",
        ":signature",
        ":vulnerability_manager",
        "//vanir/language_parsers:common",
        "//vanir/scanners:scanner_base",
        "//vanir/scanners:target_selection_strategy",
        requirement("absl-py"),
    ],
)

py_test(
    name = "refiner_test",
    size = "small",
    srcs = ["vanir/refiner_test.py"],
    data = ["@pybind11_abseil//pybind11_abseil:status.so"],
    deps = [
        ":parser",
        ":refiner",
        ":signature",
        "//vanir/code_extractors:code_extractor_base",
        requirement("absl-py"),
        requirement("mmh3"),
    ],
)

py_test(
    name = "truncated_path_test",
    srcs = ["vanir/truncated_path_test.py"],
    deps = [
        ":truncated_path",
        requirement("absl-py"),
    ],
)

py_test(
    name = "file_list_manager_test",
    srcs = ["vanir/file_list_manager_test.py"],
    data = ["@pybind11_abseil//pybind11_abseil:status.so"],
    deps = [
        ":file_list_manager",
        requirement("absl-py"),
    ],
)

py_test(
    name = "vulnerability_overwriter_test",
    srcs = ["vanir/vulnerability_overwriter_test.py"],
    data = [
        "//vanir/testdata:test_overwrite_specs.json",
    ],
    deps = [
        ":file_path_utils",
        ":vulnerability_overwriter",
        requirement("absl-py"),
    ],
)

# This is an example test demonstrating how to validate overwrite specs.
# To use this test, you'll need to provide your own overwrite specs file
# and signature files. e.g.
# bazel run //:overwrite_specs_validity_test -- \
#     --overwrite_specs=your_overwrite_specs.json \
#     --signature_files=your_signatures_json_file.json
# Note: This is not a test that verifies Vanir's functionality; it's to verify
# that the overwrite specs are correct or not and hence it is declared as a
# 'py_binary' here.
py_binary(
    name = "overwrite_specs_validity_test",
    srcs = ["vanir/overwrite_specs_validity_test.py"],
    args = [
        "--overwrite_specs=vanir/testdata/test_overwrite_specs.json",
        "--signature_files=vanir/testdata/test_vulnerabilities_platform.json",
        "--signature_files=vanir/testdata/test_vulnerabilities_kernel.json",
    ],
    data = [
        "//vanir/testdata:test_overwrite_specs.json",
        "//vanir/testdata:test_vulnerabilities",
    ],
    deps = [
        "//:vulnerability_overwriter",
        requirement("absl-py"),
    ],
)
